{"version":3,"sources":["components/Navbar/index.js","components/Authenticator/singup.js","components/Authenticator/login.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","Fragment","lib","className","alignLinks","href","SignupForm","icon","label","email","validate","password","type","waves","right","Component","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","App","react_router_dom","components_Navbar","react_router","exact","path","component","login","singup","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAwBeA,MAlBf,WACE,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQC,UAAU,SAAUC,WAAW,SAC7CN,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASG,KAAK,KAAd,SAGAP,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASG,KAAK,WAAd,WAGAP,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASG,KAAK,gDCkDCC,mLAvBX,OACER,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWK,KAAK,MAAMC,MAAM,SAC5BV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWK,KAAK,QAAQE,OAAK,EAACC,UAAQ,EAACF,MAAM,UAC7CV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWK,KAAK,OAAOI,UAAQ,EAACH,MAAM,aACtCV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQU,KAAK,SAASC,MAAM,SAA5B,UAEEf,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAMY,OAAK,GAAX,QAEFhB,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQU,KAAK,SAASC,MAAM,SAA5B,QAEEf,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAMY,OAAK,GAAX,QAEFhB,EAAAC,EAAAC,cAAA,mBAxDiBe,aC2DVC,cA1Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXf,MAAO,GACPE,SAAU,IAJAM,wEAqCZ,OACEnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWK,KAAK,QAAQE,OAAK,EAACC,UAAQ,EAACF,MAAM,UAC7CV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,UAAD,CAAWK,KAAK,OAAOI,UAAQ,EAACH,MAAM,aACtCV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQU,KAAK,SAASC,MAAM,SAA5B,QAEEf,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAMY,OAAK,GAAX,QAEFhB,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAASU,KAAK,SAASC,MAAM,SAA7B,UAEEf,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAOY,OAAK,GAAZ,QAEFhB,EAAAC,EAAAC,cAAA,mBArDYe,aCuBLU,MAhBf,WACE,OACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjClC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWE,QCN7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cea1437a.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, NavItem} from 'react-materialize';\nimport 'components/Navbar/Navbar.css'\n\n\n\nfunction Nav() {\n  return (\n    <React.Fragment>\n      <Navbar className=\"navbar\"  alignLinks=\"right\">\n<NavItem href=\"/\">\nLogin\n</NavItem>\n<NavItem href=\"/signup\">\nSign Up\n</NavItem>\n<NavItem href=\"\">\n\n</NavItem>\n</Navbar>\n</React.Fragment>\n  );\n}\n\nexport default Nav;\n\n","import React, { Component } from \"react\";\nimport { TextInput, Button, Icon } from \"react-materialize\";\n// import axios from \"axios\";\n\nclass SignupForm extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       name: \"\",\n//       email: \"\",\n//       password: \"\"\n//     };\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   handleChange(event) {\n//   \tthis.setState({\n//   \t\t[event.target.name]: event.target.value\n//   \t})\n//   }\n//   handleSubmit(event) {\n//   \tevent.preventDefault()\n//   \tconsole.log('sign-up-form, username: ');\n//   \tconsole.log(this.state.username);\n//   \t//request to server here\n//   \taxios.post('/user/', {\n//   \t\tusername: this.state.username,\n//   \t\tpassword: this.state.password\n//   \t})\n//   \t\t.then(response => {\n//   \t\t\tconsole.log(response)\n//   \t\t\tif (!response.data.errmsg) {\n//   \t\t\t\tconsole.log('successful signup')\n//   \t\t\t\tthis.setState({\n//   \t\t\t\t\tredirectTo: '/login'\n//   \t\t\t\t})\n//   \t\t\t} else {\n//   \t\t\t\tconsole.log('username already taken')\n//   \t\t\t}\n//   \t\t})\n\n//   }\n  render() {\n    return (\n      <div className=\"SignupForm\">\n        <br />\n        <TextInput icon=\"add\" label=\"Name\" />\n        <br />\n        <TextInput icon=\"email\" email validate label=\"Email\" />\n        <br />\n        <TextInput icon=\"lock\" password label=\"Password\" />\n        <br />\n        <Button type=\"submit\" waves=\"light\">\n          Sign up\n          <Icon right>add</Icon>\n        </Button>\n        <Button type=\"submit\" waves=\"light\">\n          Login\n          <Icon right>add</Icon>\n        </Button>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default SignupForm;\n","import React, { Component } from \"react\";\nimport { TextInput, Button, Icon } from \"react-materialize\";\n// import axios from \"axios\";\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n    // this.handleSubmit = this.handleSubmit.bind(this);\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  // handleChange(event) {\n  // \tthis.setState({\n  // \t\t[event.target.name]: event.target.value\n  // \t})\n  // }\n  // handleSubmit(event) {\n  // \tevent.preventDefault()\n  // \tconsole.log('sign-up-form, username: ');\n  // \tconsole.log(this.state.username);\n  // \t//request to server here\n  // \taxios.post('/user/', {\n  // \t\tusername: this.state.username,\n  // \t\tpassword: this.state.password\n  // \t})\n  // \t\t.then(response => {\n  // \t\t\tconsole.log(response)\n  // \t\t\tif (!response.data.errmsg) {\n  // \t\t\t\tconsole.log('successful signup')\n  // \t\t\t\tthis.setState({\n  // \t\t\t\t\tredirectTo: '/login'\n  // \t\t\t\t})\n  // \t\t\t} else {\n  // \t\t\t\tconsole.log('username already taken')\n  // \t\t\t}\n  // \t\t})\n\n  // }\n  render() {\n    return (\n      <div className=\"Login\">\n        <br />\n        <TextInput icon=\"email\" email validate label=\"Email\" />\n        <br />\n        <TextInput icon=\"lock\" password label=\"Password\" />\n        <br />\n        <Button type=\"submit\" waves=\"light\">\n          Login\n          <Icon right>add</Icon>\n        </Button>\n        <Button  type=\"submit\" waves=\"light\" >\n          Sign up\n          <Icon  right>add</Icon>\n        </Button>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from './components/Navbar/index';\n// import Card from './components/card';\n// import DiffCard from './components/difficultyCard/index';\n// import Button from './components/TimerButton/index'\nimport singup from \"./components/Authenticator/singup\"\nimport login from \"./components/Authenticator/login\"\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={login} />\n          <Route exact path=\"/signup\" component={singup} />\n          {/* <Route exact path=\"/books/:id\" component={Detail} />\n          <Route component={NoMatch} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}